// Code generated by MockGen. DO NOT EDIT.
// Source: resource_storage.go

// Package resourcemanager is a generated GoMock package.
package resourcemanager

import (
	context "context"
	resourcemodel "github.com/amidgo/cloud-resources/internal/model/resourcemodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResourceStorage is a mock of ResourceStorage interface.
type MockResourceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStorageMockRecorder
}

// MockResourceStorageMockRecorder is the mock recorder for MockResourceStorage.
type MockResourceStorageMockRecorder struct {
	mock *MockResourceStorage
}

// NewMockResourceStorage creates a new mock instance.
func NewMockResourceStorage(ctrl *gomock.Controller) *MockResourceStorage {
	mock := &MockResourceStorage{ctrl: ctrl}
	mock.recorder = &MockResourceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceStorage) EXPECT() *MockResourceStorageMockRecorder {
	return m.recorder
}

// AddResource mocks base method.
func (m *MockResourceStorage) AddResource(ctx context.Context, addResource resourcemodel.AddResource) (resourcemodel.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResource", ctx, addResource)
	ret0, _ := ret[0].(resourcemodel.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddResource indicates an expected call of AddResource.
func (mr *MockResourceStorageMockRecorder) AddResource(ctx, addResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockResourceStorage)(nil).AddResource), ctx, addResource)
}

// DeleteResource mocks base method.
func (m *MockResourceStorage) DeleteResource(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockResourceStorageMockRecorder) DeleteResource(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockResourceStorage)(nil).DeleteResource), ctx, id)
}

// ResourceList mocks base method.
func (m *MockResourceStorage) ResourceList(ctx context.Context) ([]*resourcemodel.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceList", ctx)
	ret0, _ := ret[0].([]*resourcemodel.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceList indicates an expected call of ResourceList.
func (mr *MockResourceStorageMockRecorder) ResourceList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceList", reflect.TypeOf((*MockResourceStorage)(nil).ResourceList), ctx)
}

// UpdateResource mocks base method.
func (m *MockResourceStorage) UpdateResource(ctx context.Context, id int, updateResource resourcemodel.UpdateResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, id, updateResource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockResourceStorageMockRecorder) UpdateResource(ctx, id, updateResource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockResourceStorage)(nil).UpdateResource), ctx, id, updateResource)
}
