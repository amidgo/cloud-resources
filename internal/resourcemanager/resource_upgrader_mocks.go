// Code generated by MockGen. DO NOT EDIT.
// Source: resource_upgrader.go

// Package resourcemanager is a generated GoMock package.
package resourcemanager

import (
	context "context"
	pricemodel "github.com/amidgo/cloud-resources/internal/model/pricemodel"
	resourcemodel "github.com/amidgo/cloud-resources/internal/model/resourcemodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResourceAddUpgrader is a mock of ResourceAddUpgrader interface.
type MockResourceAddUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockResourceAddUpgraderMockRecorder
}

// MockResourceAddUpgraderMockRecorder is the mock recorder for MockResourceAddUpgrader.
type MockResourceAddUpgraderMockRecorder struct {
	mock *MockResourceAddUpgrader
}

// NewMockResourceAddUpgrader creates a new mock instance.
func NewMockResourceAddUpgrader(ctrl *gomock.Controller) *MockResourceAddUpgrader {
	mock := &MockResourceAddUpgrader{ctrl: ctrl}
	mock.recorder = &MockResourceAddUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceAddUpgrader) EXPECT() *MockResourceAddUpgraderMockRecorder {
	return m.recorder
}

// AddResource mocks base method.
func (m *MockResourceAddUpgrader) AddResource(ctx context.Context, price pricemodel.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResource", ctx, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResource indicates an expected call of AddResource.
func (mr *MockResourceAddUpgraderMockRecorder) AddResource(ctx, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockResourceAddUpgrader)(nil).AddResource), ctx, price)
}

// AddResourceReport mocks base method.
func (m *MockResourceAddUpgrader) AddResourceReport(price pricemodel.Price) ResourceReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourceReport", price)
	ret0, _ := ret[0].(ResourceReport)
	return ret0
}

// AddResourceReport indicates an expected call of AddResourceReport.
func (mr *MockResourceAddUpgraderMockRecorder) AddResourceReport(price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceReport", reflect.TypeOf((*MockResourceAddUpgrader)(nil).AddResourceReport), price)
}

// UpgradeResource mocks base method.
func (m *MockResourceAddUpgrader) UpgradeResource(ctx context.Context, resource resourcemodel.Resource, max pricemodel.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeResource", ctx, resource, max)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeResource indicates an expected call of UpgradeResource.
func (mr *MockResourceAddUpgraderMockRecorder) UpgradeResource(ctx, resource, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeResource", reflect.TypeOf((*MockResourceAddUpgrader)(nil).UpgradeResource), ctx, resource, max)
}

// UpgradeResourceReport mocks base method.
func (m *MockResourceAddUpgrader) UpgradeResourceReport(resource resourcemodel.Resource, min, max pricemodel.Price) ResourceReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeResourceReport", resource, min, max)
	ret0, _ := ret[0].(ResourceReport)
	return ret0
}

// UpgradeResourceReport indicates an expected call of UpgradeResourceReport.
func (mr *MockResourceAddUpgraderMockRecorder) UpgradeResourceReport(resource, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeResourceReport", reflect.TypeOf((*MockResourceAddUpgrader)(nil).UpgradeResourceReport), resource, min, max)
}
